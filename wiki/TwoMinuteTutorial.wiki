#summary This is a two minute tutorial to resting. This is to demonstrate how easy it is to use resting.

= Two Minute Tutorial =

This is a very quick tutorial to demonstrate how easy it is to use resting. 

Suppose  your rest URL is http://local.yahooapis.com/MapsService/V1/geocode?appid=YD-9G7bey8_JXxQP6rxl.fBFGgCdNjoDMACQA--&state=CA . 

The resting code can be used in these three ways: 
 
*Option 1 (Easy and fast): Pass the entire URI and read the entire HTTP response as a String*
 
{{{
ServiceResponse response=Resting.get("http://local.yahooapis.com/MapsService/V1/geocode?appid=YD-9G7bey8_JXxQP6rxl.fBFGgCdNjoDMACQA--&state=CA");

System.out.println(response.toString()); //Read the entire response body.
}}}
 
 
*Option 2 (Recommended for JSON/complex encoding issue): Create a RequestParams object*

Request params are the collection of data in(key=value) format. 

Pass it along with the base URI (http://.././ path). You can even implement your own RequestParams. 
 
_RequestParams params = new BasicRequestParams(); 

params.add("appid", "YD-9G7bey8_JXxQP6rxl.fBFGgCdNjoDMACQA--");

params.add("state", "CA");

ServiceResponse response=Resting.get("http://local.yahooapis.com/MapsService/V1/geocode",params); 

System.out.println(response.toString()); //Read the entire response body._
 
 
*Option 3: Create your custom JAVA objects from REST response.* 

This can be done in two ways. 
 
  *A. For JSON response: 
 
  Suppose your JSON response is of the format given below. 
  
  
  {
  "type" : "stationary"
  ,"product":
  [
  {
  "productId":"12345","productName":"pen"
  }
  ,
  {
  "productId":"56789","productName":"pencil"
  }
  ]
  }
  
  You wish to retrieve the list of "product" objects. Here, "product" is the JSON alias: 
  
  RequestParams jsonParams = new JSONRequestParams(); //Create request params 

  jsonParams.add("key", "your_key");

  List<Product> products=Resting.getByJSON("http://api.zappos.com/Product/12345",80,jsonParams, Product.class, "product");//Get the list of Product objects by passing "product" as alias
  
  *B. For XML response:
 
 
  Alias alias=new Alias().add("Result", Result.class).add("ResultSet", ResultSet.class); //Create an alias object which will help transforming each embedded object from XML to Java.
  List<ResultSet> resultset=Resting.getByXML("http://local.yahooapis.com/MapsService/V1/geocode", 80,params,ResultSet.class, alias);




= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages